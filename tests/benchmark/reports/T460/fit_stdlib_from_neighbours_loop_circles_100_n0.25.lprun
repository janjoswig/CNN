Timer unit: 1e-06 s

Total time: 0.001227 s
File: /home/janjoswig/CNN/tests/benchmark/snippets/fits.py
Function: fit_stdlib_from_neighbours_loop at line 215

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   215                                           def fit_stdlib_from_neighbours_loop(
   216                                                   cnn_cutoff: int,
   217                                                   neighbours: List[Set[int]]) -> List:
   218                                               """Worker function variant applying the CNN algorithm.
   219                                           
   220                                               Assigns labels to points starting from pre-computed neighbour list.
   221                                               Uses Python standard library only.  Minor design difference to
   222                                               `fit_stdlib_from_neighbours_index` in looping over all points
   223                                               instead of checking for `include.index(True)`. Expected to be faster
   224                                               when many cluster initialisations are done. Also, checking queue
   225                                               at the end of the inner loop instead of in the begenning (no
   226                                               performance difference expected, but unnecessary adding of initial
   227                                               points to queue is avoided).
   228                                           
   229                                               Args:
   230                                                   cnn_cutoff: Similarity criterion
   231                                                   neighbours: List of length #points containing sets of
   232                                                       neighbouring point indices
   233                                           
   234                                               Returns:
   235                                                   Labels
   236                                               """
   237                                           
   238         1          3.0      3.0      0.2      len_ = len(neighbours)
   239                                           
   240                                               # Initialise labels
   241         1         19.0     19.0      1.5      labels = [0 for _ in range(len_)]
   242                                           
   243                                               # Track assigment
   244         1         15.0     15.0      1.2      include = [True for _ in range(len_)]
   245                                           
   246                                               # Start with first cluster (0 = noise)
   247         1          1.0      1.0      0.1      current = 1
   248                                           
   249                                               # Initialise queue of points to scan
   250         1          1.0      1.0      0.1      queue = deque()
   251                                           
   252       101         68.0      0.7      5.5      for point in range(len_):
   253       100         76.0      0.8      6.2          if not include[point]:
   254                                                       # Point already assigned
   255        37         27.0      0.7      2.2              continue
   256        63         43.0      0.7      3.5          labels[point] = current          # Assign cluster label
   257        63         51.0      0.8      4.2          include[point] = False           # Mark point as included
   258                                           
   259                                                   while True:
   260                                                       # Loop over neighbouring points
   261       100         81.0      0.8      6.6              neigh = neighbours[point]
   262       298        238.0      0.8     19.4              for member in neigh:
   263       198        138.0      0.7     11.2                  if not include[member]:
   264                                                               # Point already assigned
   265       132         96.0      0.7      7.8                      continue
   266                                           
   267                                                           # conditional growth
   268        66         93.0      1.4      7.6                  if len(neigh.intersection(neighbours[member])) >= cnn_cutoff:
   269        37         32.0      0.9      2.6                      labels[member] = current
   270        37         22.0      0.6      1.8                      include[member] = False
   271        37         28.0      0.8      2.3                      queue.append(member)
   272                                           
   273       100         79.0      0.8      6.4              if not queue:
   274        63         43.0      0.7      3.5                  break
   275        37         27.0      0.7      2.2              point = queue.popleft()  # FIFO
   276                                           
   277        63         45.0      0.7      3.7          current += 1
   278                                           
   279         1          1.0      1.0      0.1      return labels