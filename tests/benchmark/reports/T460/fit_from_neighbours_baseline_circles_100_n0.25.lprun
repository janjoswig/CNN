Timer unit: 1e-06 s

Total time: 0.006673 s
File: /home/janjoswig/CNN/tests/benchmark/snippets/fits.py
Function: fit_from_neighbours_baseline at line 7

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     7                                           def fit_from_neighbours_baseline(
     8                                                   cnn_cutoff, neighbours):
     9                                               """Original implementation of CNN clustering
    10                                           
    11                                               Published in [...] For illustration purposes variables have been
    12                                               sometimes renamed, PEP8 conformance was loosely ensured and
    13                                               docstrings and more comments where included.  To make new comments
    14                                               distinguishable from the original ones a double number sign (##) was
    15                                               used.
    16                                           
    17                                               Assign cluster labels to points starting from pre-computed neighbour
    18                                               list.
    19                                           
    20                                               Args:
    21                                                   neighbours: Neighbourlist as list of numpy.ndarrays
    22                                                   cnn_cutoff: Similarity criterion
    23                                               """
    24                                           
    25         1          3.0      3.0      0.0      def ismember(a, b):
    26                                                   """Test if two iterables have common elements
    27                                           
    28                                                   Args:
    29                                                      a, b (iterable): Iterables to compare
    30                                                   Returns:
    31                                                      List of same length as `a` in which the elements
    32                                                      indicate if an element of `a` is in `b`, where
    33                                                         - the list element is -1 if the element of `a` is not
    34                                                            in `b`
    35                                                         - the list element is the index of the element in ` b`
    36                                                            if the element of `a` is in `b`
    37                                                   """
    38                                           
    39                                                   bi = {}
    40                                                   ## Container for unique elements in b {element: index_in_b}
    41                                                   for i, el in enumerate(b):
    42                                                       if el not in bi:
    43                                                           bi[el] = i
    44                                                   return [bi.get(itm, -1) for itm in a]
    45                                           
    46         1          3.0      3.0      0.0      n = len(neighbours)
    47                                           
    48         1         11.0     11.0      0.2      n_neighbours = np.zeros(n)  ## Neighbour count for each point
    49       101        154.0      1.5      2.3      for i in range(n):
    50       100        200.0      2.0      3.0          n_neighbours[i] = len(neighbours[i])
    51                                           
    52                                               # Preset parameters for the clustering
    53                                           
    54         1          1.0      1.0      0.0      cn = 0                # Cluster Number
    55         1          1.0      1.0      0.0      w = 0                 # Control value I
    56                                               ## Indicates clustering done, 0: False, >0: True
    57                                           
    58         1          4.0      4.0      0.1      clusters = [0] * n    # Preset cluster list
    59                                               ## Used instead of labels
    60                                           
    61                                               # Filter noise points
    62         1         34.0     34.0      0.5      n_neighbours[n_neighbours <= cnn_cutoff] = 0  ## No (0) neighbours
    63                                               ## Remove for comparability.
    64                                               ## Filtering should be done before the actual fit
    65                                           
    66        21         30.0      1.4      0.4      while w < 1:  ## While not finished
    67                                                   # Find maximal number of nearest neighbors
    68        20        847.0     42.4     12.7          nmax = np.nonzero(n_neighbours == max(n_neighbours))[0]
    69                                                   ## Remove for comparability.
    70                                                   ## Initial cluster points can be choosen arbitrarily.
    71                                                   ## Only interesting when clusters should be found approximately
    72                                                   ## in the order of size, which is usefull when something like
    73                                                   ## max_clusters is set.
    74                                           
    75                                                   # Reset cluster
    76        20        128.0      6.4      1.9          C = np.zeros(n, dtype=int)
    77                                           
    78                                                   # Write point with the highest density into the cluster
    79        20         57.0      2.9      0.9          C[0] = nmax[0]
    80                                           
    81                                                   # Cluster index
    82        20         42.0      2.1      0.6          cl = int(1)  ## How many points are in the current cluster
    83                                           
    84                                                   # Control value II
    85        20         29.0      1.4      0.4          cc = 1
    86                                                   ## New point added? 0: False, >0: True
    87                                           
    88                                                   # Cluster index for new added points
    89        20         30.0      1.5      0.4          lv = 0
    90        20        100.0      5.0      1.5          ci = np.zeros(n, dtype=int)
    91                                           
    92                                                   # Mask point with the highest density
    93        20         58.0      2.9      0.9          n_neighbours[nmax[0]] = 0
    94                                           
    95        51         81.0      1.6      1.2          while cc > 0:
    96                                                       # Reset control value II and define new limits
    97        31         46.0      1.5      0.7              cc = 0
    98        31         53.0      1.7      0.8              ci[lv] = cl
    99                                           
   100                                                       ## Loop over points added to the cluster
   101        88        318.0      3.6      4.8              for a in C[ci[lv - 1]: ci[lv]]:
   102                                           
   103                                                           # Extract Neighborlist of a within radius_cutoff
   104        57        107.0      1.9      1.6                  Na = neighbours[a]
   105                                           
   106                                                           # Compare Neighborlists of a and all reachable datapoints
   107       225        436.0      1.9      6.5                  for b in Na:
   108                                                               # Check if point is already clustered
   109       168        723.0      4.3     10.8                      if n_neighbours[b] > 0:
   110        44         94.0      2.1      1.4                          Nb = neighbours[b]
   111                                           
   112        44        943.0     21.4     14.1                          tcc = np.asarray(ismember(Na, Nb))
   113        44        417.0      9.5      6.2                          tc = len(tcc[tcc >= 0])
   114                                           
   115                                                                   # Check if b in the Nearest Neighbors of a
   116        44         92.0      2.1      1.4                          if b in Na:
   117        44         75.0      1.7      1.1                              tb = 1
   118                                                                   else:
   119                                                                       tb = 0
   120                                           
   121                                                                   # Check if a in the Nearest Neighbors of b
   122        44         88.0      2.0      1.3                          if a in Nb:
   123        44         75.0      1.7      1.1                              ta = 1
   124                                                                   else:
   125                                                                       ta = 0
   126                                           
   127                                                                   # Check truncation criterion
   128        44         92.0      2.1      1.4                          if tc >= cnn_cutoff and ta > 0 and tb > 0:
   129                                                                       # Add point to the cluster
   130        37         79.0      2.1      1.2                              C[cl] = b
   131        37         66.0      1.8      1.0                              cl = cl + 1
   132        37         63.0      1.7      0.9                              cc = cc + 1
   133                                           
   134                                                                       # Mask clustered point
   135        37         87.0      2.4      1.3                              n_neighbours[b] = 0
   136                                           
   137                                                       # Update lv
   138        31         48.0      1.5      0.7              lv = lv + 1
   139                                           
   140                                                   # Write cluster to the cluster list
   141        20         73.0      3.6      1.1          Cc = np.int_(C[:cl])
   142        20         35.0      1.8      0.5          clusters[cn] = Cc
   143        20         31.0      1.6      0.5          cn = cn + 1  ## Cluster count increased
   144                                           
   145                                                   # Truncation criteria
   146        20        780.0     39.0     11.7          if sum(n_neighbours) == 0:  # All particles are clustered
   147         1          1.0      1.0      0.0              w = 1
   148        20         36.0      1.8      0.5          if cn == n:  # The maximal number of clusters is reached
   149                                                       w = 2
   150                                           
   151         1          2.0      2.0      0.0      return clusters