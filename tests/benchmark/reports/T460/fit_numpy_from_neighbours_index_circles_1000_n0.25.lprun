Timer unit: 1e-06 s

Total time: 0.099482 s
File: /home/janjoswig/CNN/tests/benchmark/snippets/fits.py
Function: fit_numpy_from_neighbours_index at line 351

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   351                                           def fit_numpy_from_neighbours_index(
   352                                                   cnn_cutoff: int,
   353                                                   neighbours: np.ndarray) -> np.ndarray:
   354                                               """Worker function variant applying the CNN algorithm.
   355                                           
   356                                               Assigns labels to points starting from pre-computed neighbour list.
   357                                               Uses Python standard library and NumPy where appropriate.  Analouge
   358                                               to `fit_std_from_neighbours_index`.  Performance gain is, however,
   359                                               not anticipated as there is no "early return" equivalent to `index`
   360                                               in NumPy yet.
   361                                           
   362                                               Args:
   363                                                   cnn_cutoff: Similarity criterion
   364                                                   neighbours: NumPy array of length #points containing arrays of
   365                                                       neighbouring point indices
   366                                           
   367                                               Returns:
   368                                                   Labels
   369                                               """
   370                                           
   371         1          5.0      5.0      0.0      len_ = neighbours.shape[0]
   372                                           
   373                                               # Initialise labels
   374         1         24.0     24.0      0.0      labels = np.zeros(len_)
   375                                           
   376                                               # Track assigment
   377         1         47.0     47.0      0.0      include = np.ones(len_, dtype=bool)
   378                                           
   379                                               # Start with first cluster (0 = noise)
   380         1          2.0      2.0      0.0      current = 1
   381                                           
   382                                               # Initialise queue of points to scan
   383         1          3.0      3.0      0.0      queue = deque()
   384                                           
   385                                               while True:
   386         3          3.0      1.0      0.0          try:
   387         3        580.0    193.3      0.6              point = np.nonzero(include)[0][0]  # Pick starting point
   388         1          1.0      1.0      0.0          except IndexError:
   389         1          1.0      1.0      0.0              break
   390         2          7.0      3.5      0.0          labels[point] = current            # Assign cluster label
   391         2          4.0      2.0      0.0          include[point] = False             # Mark point as included
   392                                           
   393                                                   while True:
   394                                                       # Loop over neighbouring points
   395      1000       1058.0      1.1      1.1              neigh = neighbours[point]
   396     28448      24395.0      0.9     24.5              for member in neigh:
   397     27448      22578.0      0.8     22.7                  if not include[member]:
   398                                                               # Point already assigned
   399     26450      16285.0      0.6     16.4                      continue
   400                                           
   401                                                           # conditional growth
   402      2994      27256.0      9.1     27.4                  if len(np.intersect1d(
   403       998       1078.0      1.1      1.1                          neigh, neighbours[member], assume_unique=True
   404       998        998.0      1.0      1.0                          )) >= cnn_cutoff:
   405       998       1321.0      1.3      1.3                      labels[member] = current
   406       998       1004.0      1.0      1.0                      include[member] = False
   407       998        972.0      1.0      1.0                      queue.append(member)
   408                                           
   409      1000        754.0      0.8      0.8              if not queue:
   410         2          1.0      0.5      0.0                  break
   411       998       1103.0      1.1      1.1              point = queue.popleft()  # FIFO
   412                                           
   413         2          2.0      1.0      0.0          current += 1
   414                                           
   415         1          0.0      0.0      0.0      return labels