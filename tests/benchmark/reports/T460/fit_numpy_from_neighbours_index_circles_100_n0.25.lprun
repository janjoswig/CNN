Timer unit: 1e-06 s

Total time: 0.026003 s
File: /home/janjoswig/CNN/tests/benchmark/snippets/fits.py
Function: fit_numpy_from_neighbours_index at line 351

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   351                                           def fit_numpy_from_neighbours_index(
   352                                                   cnn_cutoff: int,
   353                                                   neighbours: np.ndarray) -> np.ndarray:
   354                                               """Worker function variant applying the CNN algorithm.
   355                                           
   356                                               Assigns labels to points starting from pre-computed neighbour list.
   357                                               Uses Python standard library and NumPy where appropriate.  Analouge
   358                                               to `fit_std_from_neighbours_index`.  Performance gain is, however,
   359                                               not anticipated as there is no "early return" equivalent to `index`
   360                                               in NumPy yet.
   361                                           
   362                                               Args:
   363                                                   cnn_cutoff: Similarity criterion
   364                                                   neighbours: NumPy array of length #points containing arrays of
   365                                                       neighbouring point indices
   366                                           
   367                                               Returns:
   368                                                   Labels
   369                                               """
   370                                           
   371         1         18.0     18.0      0.1      len_ = neighbours.shape[0]
   372                                           
   373                                               # Initialise labels
   374         1         45.0     45.0      0.2      labels = np.zeros(len_)
   375                                           
   376                                               # Track assigment
   377         1        129.0    129.0      0.5      include = np.ones(len_, dtype=bool)
   378                                           
   379                                               # Start with first cluster (0 = noise)
   380         1          6.0      6.0      0.0      current = 1
   381                                           
   382                                               # Initialise queue of points to scan
   383         1          8.0      8.0      0.0      queue = deque()
   384                                           
   385                                               while True:
   386        64        292.0      4.6      1.1          try:
   387        64       2587.0     40.4      9.9              point = np.nonzero(include)[0][0]  # Pick starting point
   388         1          5.0      5.0      0.0          except IndexError:
   389         1          7.0      7.0      0.0              break
   390        63        440.0      7.0      1.7          labels[point] = current            # Assign cluster label
   391        63        331.0      5.3      1.3          include[point] = False             # Mark point as included
   392                                           
   393                                                   while True:
   394                                                       # Loop over neighbouring points
   395       100        545.0      5.5      2.1              neigh = neighbours[point]
   396       298       2605.0      8.7     10.0              for member in neigh:
   397       198       1140.0      5.8      4.4                  if not include[member]:
   398                                                               # Point already assigned
   399       132        549.0      4.2      2.1                      continue
   400                                           
   401                                                           # conditional growth
   402       198      14252.0     72.0     54.8                  if len(np.intersect1d(
   403        66        400.0      6.1      1.5                          neigh, neighbours[member], assume_unique=True
   404        66        425.0      6.4      1.6                          )) >= cnn_cutoff:
   405        37        335.0      9.1      1.3                      labels[member] = current
   406        37        262.0      7.1      1.0                      include[member] = False
   407        37        345.0      9.3      1.3                      queue.append(member)
   408                                           
   409       100        474.0      4.7      1.8              if not queue:
   410        63        245.0      3.9      0.9                  break
   411        37        262.0      7.1      1.0              point = queue.popleft()  # FIFO
   412                                           
   413        63        292.0      4.6      1.1          current += 1
   414                                           
   415         1          4.0      4.0      0.0      return labels