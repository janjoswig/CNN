Timer unit: 1e-06 s

Total time: 0.099443 s
File: /home/janjoswig/CNN/tests/benchmark/snippets/fits.py
Function: fit_numpy_from_neighbours_membercheck at line 632

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   632                                           def fit_numpy_from_neighbours_membercheck(
   633                                                   cnn_cutoff: int,
   634                                                   neighbours: np.ndarray) -> np.ndarray:
   635                                               """Worker function variant applying the CNN algorithm.
   636                                           
   637                                               Assigns labels to points starting from pre-computed neighbour list.
   638                                               Uses Python standard library and NumPy where appropriate.  Modifies
   639                                               the loop over neighbour neighbours with a bulk check for inclusion.
   640                                               Additionally bulk checks neighbour list lengths to filter out points
   641                                               with less then `cnn_cutoff` members.
   642                                               Also analouge to `fit_std_from_neighbours_loop`.
   643                                           
   644                                               Args:
   645                                                   cnn_cutoff: Similarity criterion
   646                                                   neighbours: NumPy array of length #points containing arrays of
   647                                                       neighbouring point indices
   648                                           
   649                                               Returns:
   650                                                   Labels
   651                                               """
   652                                           
   653         1          4.0      4.0      0.0      len_ = neighbours.shape[0]
   654                                           
   655                                               # Initialise labels
   656         1         20.0     20.0      0.0      labels = np.zeros(len_)
   657                                           
   658                                               # Track assigment
   659         1         30.0     30.0      0.0      consider = np.ones(len_, dtype=bool)
   660                                           
   661                                               # Filter out points with not enough members
   662         3         25.0      8.3      0.0      consider[np.where(
   663         2        493.0    246.5      0.5          np.array([x.size for x in neighbours])
   664         1          1.0      1.0      0.0          < cnn_cutoff
   665         2          1.0      0.5      0.0          )[0]] = 0
   666                                           
   667                                               # Start with first cluster (0 = noise)
   668         1          1.0      1.0      0.0      current = 1
   669                                           
   670                                               # Initialise queue of points to scan
   671         1          1.0      1.0      0.0      queue = deque()
   672                                           
   673      2001       1290.0      0.6      1.3      for init_point in range(len_):
   674      2000       1424.0      0.7      1.4          if not consider[init_point]:
   675                                                       # Point already assigned
   676      1998       1261.0      0.6      1.3              continue
   677         2          3.0      1.5      0.0          labels[init_point] = current            # Assign cluster label
   678         2          2.0      1.0      0.0          consider[init_point] = False             # Mark point as included
   679                                           
   680         2          1.0      0.5      0.0          point = init_point
   681                                                   while True:
   682                                                       # Loop over neighbouring points
   683      2000       2156.0      1.1      2.2              neigh = neighbours[point]
   684                                                       # Loop only over members not included
   685      4034       8994.0      2.2      9.0              for member in neigh[consider[neigh]]:
   686                                                           # conditional growth
   687      6102      68748.0     11.3     69.1                  if len(np.intersect1d(
   688      2034       2444.0      1.2      2.5                          neigh, neighbours[member], assume_unique=True
   689      2034       2094.0      1.0      2.1                          )) >= cnn_cutoff:
   690      1998       2590.0      1.3      2.6                      labels[member] = current
   691      1998       2075.0      1.0      2.1                      consider[member] = False
   692      1998       2099.0      1.1      2.1                      queue.append(member)
   693                                           
   694      2000       1651.0      0.8      1.7              if not queue:
   695         2          1.0      0.5      0.0                  break
   696      1998       2030.0      1.0      2.0              point = queue.popleft()  # FIFO
   697                                           
   698         2          3.0      1.5      0.0          current += 1
   699                                           
   700         1          1.0      1.0      0.0      return labels