Timer unit: 1e-06 s

Total time: 0.656541 s
File: /home/janjoswig/CNN/tests/benchmark/snippets/fits.py
Function: fit_numpy_from_neighbours_index at line 430

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   430                                           def fit_numpy_from_neighbours_index(
   431                                                   cnn_cutoff: int,
   432                                                   neighbours: np.ndarray) -> np.ndarray:
   433                                               """Worker function variant applying the CNN algorithm.
   434                                           
   435                                               Assigns labels to points starting from pre-computed neighbour list.
   436                                               Uses Python standard library and NumPy where appropriate.  Analouge
   437                                               to `fit_std_from_neighbours_index`.  Performance gain is, however,
   438                                               not anticipated as there is no "early return" equivalent to `index`
   439                                               in NumPy yet.
   440                                           
   441                                               Args:
   442                                                   cnn_cutoff: Similarity criterion
   443                                                   neighbours: NumPy array of length #points containing arrays of
   444                                                       neighbouring point indices
   445                                           
   446                                               Returns:
   447                                                   Labels
   448                                               """
   449                                           
   450         1          4.0      4.0      0.0      len_ = neighbours.shape[0]
   451                                           
   452                                               # Initialise labels
   453         1         14.0     14.0      0.0      labels = np.zeros(len_)
   454                                           
   455                                               # Track assigment
   456         1         32.0     32.0      0.0      consider = np.ones(len_, dtype=bool)
   457                                           
   458                                               # Start with first cluster (0 = noise)
   459         1          0.0      0.0      0.0      current = 1
   460                                           
   461                                               # Initialise queue of points to scan
   462         1          1.0      1.0      0.0      queue = deque()
   463                                           
   464                                               while True:
   465         3          2.0      0.7      0.0          try:
   466         3        627.0    209.0      0.1              point = np.nonzero(consider)[0][0]  # Pick starting point
   467         1          2.0      2.0      0.0          except IndexError:
   468         1          2.0      2.0      0.0              break
   469         2          5.0      2.5      0.0          labels[point] = current            # Assign cluster label
   470         2          3.0      1.5      0.0          consider[point] = False             # Mark point as included
   471                                           
   472                                                   while True:
   473                                                       # Loop over neighbouring points
   474      2000       2479.0      1.2      0.4              neigh = neighbours[point]
   475    262204     206662.0      0.8     31.5              for member in neigh:
   476    260204     203540.0      0.8     31.0                  if not consider[member]:
   477                                                               # Point already assigned
   478    258170     149606.0      0.6     22.8                      continue
   479                                           
   480                                                           # conditional growth
   481      6102      77771.0     12.7     11.8                  if len(np.intersect1d(
   482      2034       2190.0      1.1      0.3                          neigh, neighbours[member], assume_unique=True
   483      2034       1959.0      1.0      0.3                          )) >= cnn_cutoff:
   484      1998       2687.0      1.3      0.4                      labels[member] = current
   485      1998       1944.0      1.0      0.3                      consider[member] = False
   486      1998       1984.0      1.0      0.3                      queue.append(member)
   487                                           
   488      2000       1749.0      0.9      0.3              if not queue:
   489         2          0.0      0.0      0.0                  break
   490      1998       3275.0      1.6      0.5              point = queue.popleft()  # FIFO
   491                                           
   492         2          2.0      1.0      0.0          current += 1
   493                                           
   494         1          1.0      1.0      0.0      return labels