Timer unit: 1e-06 s

Total time: 5.56511 s
File: /home/janjoswig/CNN/tests/benchmark/snippets/fits.py
Function: fit_numpy_from_neighbours_index at line 282

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   282                                           def fit_numpy_from_neighbours_index(
   283                                                   cnn_cutoff: int,
   284                                                   neighbours: np.ndarray) -> np.ndarray:
   285                                               """Worker function variant applying the CNN algorithm.
   286                                           
   287                                               Assigns labels to points starting from pre-computed neighbour list.
   288                                               Uses Python standard library and NumPy where appropriate.  Analouge
   289                                               to `fit_std_from_neighbours_index`.  Performance gain is, however,
   290                                               not anticipated as there is no "early return" equivalent to `index`
   291                                               in NumPy yet.
   292                                           
   293                                               Args:
   294                                                   cnn_cutoff: Similarity criterion
   295                                                   neighbours: NumPy array of length #points containing arrays of
   296                                                       neighbouring point indices
   297                                           
   298                                               Returns:
   299                                                   Labels
   300                                               """
   301                                           
   302         1          5.0      5.0      0.0      len_ = neighbours.shape[0]
   303                                           
   304                                               # Initialise labels
   305         1         20.0     20.0      0.0      labels = np.zeros(len_)
   306                                           
   307                                               # Track assigment
   308         1         30.0     30.0      0.0      include = np.ones(len_, dtype=bool)
   309                                           
   310                                               # Start with first cluster (0 = noise)
   311         1          1.0      1.0      0.0      current = 1
   312                                           
   313                                               # Initialise queue of points to scan
   314         1          1.0      1.0      0.0      queue = deque()
   315                                           
   316                                               while True:
   317         3          3.0      1.0      0.0          try:
   318         3        298.0     99.3      0.0              point = np.nonzero(include)[0][0]  # Pick starting point
   319         1          1.0      1.0      0.0          except IndexError:
   320         1          1.0      1.0      0.0              break
   321         2          5.0      2.5      0.0          labels[point] = current            # Assign cluster label
   322         2          3.0      1.5      0.0          include[point] = False             # Mark point as included
   323                                           
   324                                                   while True:
   325                                                       # Loop over neighbouring points
   326     10000      10660.0      1.1      0.2              neigh = neighbours[point]
   327   2831100    1775938.0      0.6     31.9              for member in neigh:
   328   2821100    1811736.0      0.6     32.6                  if not include[member]:
   329                                                               # Point already assigned
   330   2811102    1439463.0      0.5     25.9                      continue
   331                                           
   332                                                           # conditional growth
   333     29994     465716.0     15.5      8.4                  if len(np.intersect1d(
   334      9998      11181.0      1.1      0.2                          neigh, neighbours[member], assume_unique=True
   335      9998       7977.0      0.8      0.1                          )) >= cnn_cutoff:
   336      9998      10481.0      1.0      0.2                      labels[member] = current
   337      9998       8458.0      0.8      0.2                      include[member] = False
   338      9998       8775.0      0.9      0.2                      queue.append(member)
   339                                           
   340     10000       6160.0      0.6      0.1              if not queue:
   341         2          2.0      1.0      0.0                  break
   342      9998       8191.0      0.8      0.1              point = queue.popleft()  # FIFO
   343                                           
   344         2          2.0      1.0      0.0          current += 1
   345                                           
   346         1          0.0      0.0      0.0      return labels