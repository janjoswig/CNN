Timer unit: 1e-06 s

Total time: 0.003338 s
File: /home/janjoswig/CNN/tests/benchmark/snippets/fits.py
Function: fit_numpy_from_neighbours_loop at line 418

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   418                                           def fit_numpy_from_neighbours_loop(
   419                                                   cnn_cutoff: int,
   420                                                   neighbours: np.ndarray) -> np.ndarray:
   421                                               """Worker function variant applying the CNN algorithm.
   422                                           
   423                                               Assigns labels to points starting from pre-computed neighbour list.
   424                                               Uses Python standard library and NumPy where appropriate.  Analouge
   425                                               to `fit_std_from_neighbours_loop`.
   426                                           
   427                                               Args:
   428                                                   cnn_cutoff: Similarity criterion
   429                                                   neighbours: NumPy array of length #points containing arrays of
   430                                                       neighbouring point indices
   431                                           
   432                                               Returns:
   433                                                   Labels
   434                                               """
   435                                           
   436         1          4.0      4.0      0.1      len_ = neighbours.shape[0]
   437                                           
   438                                               # Initialise labels
   439         1          7.0      7.0      0.2      labels = np.zeros(len_)
   440                                           
   441                                               # Track assigment
   442         1         23.0     23.0      0.7      include = np.ones(len_, dtype=bool)
   443                                           
   444                                               # Start with first cluster (0 = noise)
   445         1          1.0      1.0      0.0      current = 1
   446                                           
   447                                               # Initialise queue of points to scan
   448         1          1.0      1.0      0.0      queue = deque()
   449                                           
   450                                               while True:
   451        64         33.0      0.5      1.0          try:
   452        64        347.0      5.4     10.4              point = np.nonzero(include)[0][0]  # Pick starting point
   453         1          2.0      2.0      0.1          except IndexError:
   454         1          2.0      2.0      0.1              break
   455        63         61.0      1.0      1.8          labels[point] = current            # Assign cluster label
   456        63         50.0      0.8      1.5          include[point] = False             # Mark point as included
   457                                           
   458                                                   while True:
   459                                                       # Loop over neighbouring points
   460       100         67.0      0.7      2.0              neigh = neighbours[point]
   461       298        325.0      1.1      9.7              for member in neigh:
   462       198        135.0      0.7      4.0                  if not include[member]:
   463                                                               # Point already assigned
   464       132         76.0      0.6      2.3                      continue
   465                                           
   466                                                           # conditional growth
   467       198       1830.0      9.2     54.8                  if len(np.intersect1d(
   468        66         44.0      0.7      1.3                          neigh, neighbours[member], assume_unique=True
   469        66         53.0      0.8      1.6                          )) >= cnn_cutoff:
   470        37         37.0      1.0      1.1                      labels[member] = current
   471        37         28.0      0.8      0.8                      include[member] = False
   472        37         28.0      0.8      0.8                      queue.append(member)
   473                                           
   474       100         72.0      0.7      2.2              if not queue:
   475        63         42.0      0.7      1.3                  break
   476        37         32.0      0.9      1.0              point = queue.popleft()  # FIFO
   477                                           
   478        63         37.0      0.6      1.1          current += 1
   479                                           
   480         1          1.0      1.0      0.0      return labels